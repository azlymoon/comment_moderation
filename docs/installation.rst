Инструкция по установке
========================

Данное руководство описывает подготовку окружения и запуск сервиса модерации комментариев.
Все действия выполняются в Unix-подобной системе. Для Windows используются аналоги команд,
указанные в комментариях.

Предварительные требования
--------------------------

* Python 3.10 или новее;
* PostgreSQL 14 и выше;
* Установленный Git (опционально, если клонируете репозиторий);
* Доступ в интернет для загрузки весов ML-моделей при первом запуске.

Создание виртуального окружения
-------------------------------

.. code-block:: bash

   python3 -m venv .venv
   source .venv/bin/activate          # Windows: .venv\\Scripts\\activate
   pip install --upgrade pip

Установка зависимостей
----------------------

.. code-block:: bash

   pip install -r requirements.txt

Если при установке ``torch`` возникают ошибки, следуйте официальной инструкции PyTorch
для вашей платформы, а затем повторите установку зависимостей.

Подготовка PostgreSQL
---------------------

1. Создайте базу данных и пользователя:

   .. code-block:: sql

      CREATE USER moderator WITH PASSWORD 'moderator';
      CREATE DATABASE comment_moderation OWNER moderator;

2. Установите строку подключения. Можно использовать файл ``.env`` либо переменную окружения:

   .. code-block:: bash

      export DATABASE_URL="postgresql+psycopg://moderator:moderator@localhost:5432/comment_moderation"

   Если PostgreSQL временно недоступен или требуется быстрый локальный запуск, разрешите
   автоматическое переключение на SQLite:

   .. code-block:: bash

      export SQLITE_FALLBACK_URL="sqlite+aiosqlite:///./comment_moderation.db"
      export ALLOW_SQLITE_FALLBACK=true

   Приложение сначала попытается подключиться к PostgreSQL и при неудаче перейдёт на указанную
   SQLite-базу данных.

Конфигурация через .env
-----------------------

Создайте файл ``.env`` в корне проекта (пример приведён ниже). Переменные автоматически
считываются в момент запуска приложения.

Миграции и инициализация
------------------------

Приложение использует ``SQLAlchemy Base`` и при старте создаёт схему БД автоматически.
Дополнительно ничего запускать не требуется. При включённом флаге ``GENERATE_DEMO_DATA``
в БД будут добавлены демонстрационные записи.

Запуск приложения
-----------------

.. code-block:: bash

   python3 main.py

После запуска сервер доступен на ``http://127.0.0.1:8000``. В логах будут выведены
учётные данные демо-пользователя и значения API-ключей, если они сгенерированы заново.

Сборка документации
-------------------

.. code-block:: bash

   sphinx-build -b html docs docs/_build/html

Готовая документация появится в каталоге ``docs/_build/html``. Откройте ``index.html`` в браузере.
