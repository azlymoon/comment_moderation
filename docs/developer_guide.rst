Документация разработчика
=========================

Этот раздел предназначен для инженеров, развивающих и сопровождающих сервис модерации.
Здесь описаны архитектура приложения, используемые технологии, структура БД и подходы
к расширению функциональности.

Архитектура
-----------

Приложение построено на FastAPI и разделено на несколько слоёв:

* ``app/api`` – HTTP-роутеры (``routes_moderation``, ``routes_admin``, ``routes_auth``);
* ``app/core`` – Pydantic-схемы, зависимости и функции работы с БД;
* ``app/db`` – ORM-модели на SQLAlchemy 2.0 (см. справочник классов);
* ``app/services`` – модуль ML-модерации текста;
* ``main.py`` – точка входа, запускающая uvicorn.

Поток обработки запроса на модерацию
------------------------------------

#. Клиент обращается к ``POST /api/v1/moderation/text`` с API-ключом.
#. Декларативная зависимость ``get_service`` проверяет ключ через ``store.validate_api_key``.
#. Создаётся запись ``ModerationRequest`` в БД.
#. Модуль ``app.services.text`` классифицирует текст и возвращает результат с вероятностями.
#. Результат записывается в таблицу ``ModerationResult`` и связывается с заявкой.
#. Клиент получает ``ModerationResponse`` с детальными данными.

База данных
-----------

Используется «чистый» SQLAlchemy 2.0. Основные таблицы:

* ``WebService`` – представление интегрированного сервиса;
* ``APIKey`` – хэшированные ключи с префиксом и метаданными;
* ``AdminUser`` и ``AdminSession`` – учётные записи модераторов и сессии входа;
* ``ViolationCategory`` и ``ModerationRule`` – словари правил;
* ``ModerationRequest`` и ``ModerationResult`` – заявки и решения.

При запуске выполняется ``Base.metadata.create_all``, поэтому миграции создаются автоматически.
Если необходимость в управляемых миграциях возрастёт, рекомендуется интегрировать Alembic.

Безопасность
------------

* API-ключи хранится в виде bcrypt-хэшей. Для поиска используется префикс (первые 8 символов).
* Админ-пароли также хэшируются bcrypt через ``passlib``.
* Все административные действия требуют заголовка ``X-Admin-Token``.
* Сессии администраторов имеют срок действия (по умолчанию 7 дней).

ML-модерация
------------

Логика описана в ``app/services/text.py``:

* Загружается модель ``unitary/toxic-bert`` (HuggingFace Transformers) и кастомный анализ тональности.
* Пороговые решения:

  * ``>= 0.85`` по токсичным меткам или словарю – автоотклонение;
  * ``0.55–0.85`` – ручная проверка;
  * сильный негативный сентимент (``>= 0.8``) – ручная проверка;
  * иначе – одобрение.

* Возвращаются вероятности по всем доступным меткам + дополнительным эвристикам.

Расширение функциональности
---------------------------

* **Добавление новых типов контента**: создайте отдельную функцию в ``app/services`` для обработки,
  расширьте Pydantic-схемы (``ContentType``) и добавьте новый эндпоинт.
* **Сложные правила модерации**: вынесите обработку в отдельный сервис и храните конфигурацию правил
  в JSON-формате в таблице ``ModerationRule``.
* **Интеграция очередей**: для асинхронной модерации можно использовать Celery/RQ. В этом случае
  входящий запрос сохраняется в БД, а задача отправляется в очередь для обработки.

Тестирование
------------

Рекомендуемый стек:

* ``pytest`` для модульных и интеграционных тестов;
* ``httpx.AsyncClient`` для проверки FastAPI-роутов;
* использование SQLite (``base.metadata.create_all``) для лёгких юнит-тестов.

Добавьте соответствующие зависимости в ``requirements-dev.txt`` (по желанию) и настройте CI.

Стиль кода и линтинг
--------------------

* Форматирование — ``black`` (88 символов), ``isort`` для импорта.
* Проверка стиля — ``ruff`` или ``flake8``.
* Для статической типизации используйте ``mypy`` (SQLAlchemy Base совместим с Pydantic/SQLAlchemy типами).

Работа с конфигурацией
----------------------

Настройки считываются из окружения (см. ``app/config.py``). Для локальной разработки удобно
использовать файл ``.env``:

.. code-block:: ini

   DATABASE_URL=postgresql+psycopg://moderator:moderator@localhost:5432/comment_moderation
   SQLITE_FALLBACK_URL=sqlite+aiosqlite:///./comment_moderation.db
   ALLOW_SQLITE_FALLBACK=true
   GENERATE_DEMO_DATA=true
   ADMIN_DEMO_USERNAME=moderator
   ADMIN_DEMO_PASSWORD=moderator
   ADMIN_DEMO_EMAIL=moderator@example.com
   SERVICE_DEMO_NAME=Demo Service
   SERVICE_DEMO_CONTACT=demo@example.com

Файл должен располагаться в корне проекта и не коммититься в публичный репозиторий (добавьте
его в ``.gitignore``).
